global:
  enabled: true
  logLevel: "info"
  logJSON: false
  name: consul
  domain: consul
  image: hashicorp/consul:1.19.0
  imageK8S: hashicorp/consul-k8s-control-plane:1.5.0
  imageConsulDataplane: hashicorp/consul-dataplane:1.5.0
  imagePullPolicy: "IfNotPresent"
  enablePodSecurityPolicies: false

  secretsBackend:
    vault:
      vaultNamespace: "vault-system"
      enabled: false

  argocd:
    enabled: true

  metrics:
    enabled: true
    enableAgentMetrics: true
    disableAgentHostName: false
    enableHostMetrics: false
    agentMetricsRetentionTime: 1m
    enableGatewayMetrics: true
    enableTelemetryCollector: false


server:
  enabled: true
  logLevel: "info"
  image: null
  replicas: 3
  storage: 10Gi
  storageClass: ceph-fs
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Retain
    whenScaled: Retain
  connect: false
  enableAgentDebug: true

  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "246Mi"
      cpu: "100m"

  updatePartition: 0

  disruptionBudget:
    enabled: true
    maxUnavailable: 2

  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app: {{ template "consul.name" . }}
              release: "{{ .Release.Name }}"
              component: server
          topologyKey: kubernetes.io/hostname

  tolerations: ""
  nodeSelector: |
    node-type: worker

  # Configures a service to expose ports on the Consul servers over a Kubernetes Service.
  exposeService:
    enabled: true
    type: ClusterIP

client:
  enabled: true
  logLevel: "info"
  dataDirectoryHostPath: null
  grpc: true

  nodeMeta:
    pod-name: ${HOSTNAME}
    host-ip: ${HOST_IP}

  exposeGossipPorts: false
  serviceAccount:
    annotations: null

  resources:
    requests:
      memory: "10Mi"
      cpu: "50m"
    limits:
      memory: "100Mi"
      cpu: "100m"

  nodeSelector: |
    node-type: worker
  affinity: null
  updateStrategy: null

dns:
  enabled: true
  enableRedirection: true
  type: ClusterIP

ui:
  enabled: true

  service:
    enabled: true
    type: ClusterIP

  ingress:
    enabled: true
    ingressClassName: "cilium"
    pathType: Prefix
    hosts:
      - host: consul.choigonyok.com
        paths:
          - /
    tls: []
    annotations: |
      'ingress.cilium.io/loadbalancer-mode': shared
      'ingress.cilium.io/service-type': ClusterIP

  metrics:
    enabled: false

connectInject:
  enabled: true
  replicas: 3
  default: false

  disruptionBudget:
    enabled: true
    maxUnavailable: 2
    minAvailable: null

  apiGateway:
    managedGatewayClass:
      nodeSelector: |
        node-type: worker

      serviceType: ClusterIP

      metrics:
        enabled: true
        port: null
        path: null

      deployment:
        defaultInstances: 3
        maxInstances: 3
        minInstances: 1
  
  metrics:
    defaultEnabled: false


  logLevel: "info"
  k8sAllowNamespaces: ["*"]
  nodeSelector: |
    node-type: worker
  affinity: null

tests:
  enabled: true

telemetryCollector:
  enabled: false







---
# Configure global settings in this section.
global:
  name: consul
  # Bootstrap ACLs within Consul. This is highly recommended.
  acls:
    manageSystemACLs: true
  # Gossip encryption
  gossipEncryption:
    autoGenerate: true
# Configure your Consul servers in this section.
server:
  # Specify three servers that wait until all are healthy to bootstrap the Consul cluster.
  replicas: 3
  # Specify the resources that servers request for placement. These values will serve a large environment.
  resources:
    requests:
      memory: '32Gi'
      cpu: '4'
      disk: '50Gi'
    limits:
      memory: '32Gi'
      cpu: '4'
      disk: '50Gi'
  # If using Enterprise, reference the Kubernetes secret that holds your license here
  enterpriseLicense:
    secretName: 'consul-license'
    secretKey: 'key'
# Configure Consul clients in this section
client:
  # Specify the resources that clients request for deployment.
  resources:
    requests:
      memory: '8Gi'
      cpu: '2'
      disk: '15Gi'
    limits:
      memory: '8Gi'
      cpu: '2'
      disk: '15Gi'
# Enable and configure the Consul UI.
ui:
  enabled: true
# Enable Consul connect pod injection
connectInject:
  enabled: true
  default: true
controller:
  enabled: true