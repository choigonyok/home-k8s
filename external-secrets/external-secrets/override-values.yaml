global:
  nodeSelector: {}
    # node-type: worker
  tolerations: []
  topologySpreadConstraints: []
  affinity: {}
  compatibility:
    openshift:
      adaptSecurityContext: auto

replicaCount: 3
revisionHistoryLimit: 3

image:
  repository: ghcr.io/external-secrets/external-secrets
  pullPolicy: IfNotPresent
  tag: ""
  flavour: ""

installCRDs: true

crds:
  createClusterExternalSecret: true
  createClusterSecretStore: true
  createPushSecret: true
  annotations: {}
  conversion:
    enabled: true

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
namespaceOverride: "vault-system"

commonLabels: {}

leaderElect: true

# -- If set external secrets will filter matching
# Secret Stores with the appropriate controller values.
controllerClass: ""
extendedMetricLabels: true
scopedNamespace: ""
scopedRBAC: false

processClusterExternalSecret: true
processClusterStore: true
processPushSecret: true

createOperator: true
concurrent: 1

service:
  ipFamilyPolicy: ""
  ipFamilies: []

serviceAccount:
  create: true
  automount: true
  annotations: {}
  extraLabels: {}
  name: "external-secrets-sa"

rbac:
  create: true

  servicebindings:
    create: true

extraEnv: []
extraArgs: {}
extraVolumes: []
extraObjects: []
extraVolumeMounts: []
extraContainers: []
deploymentAnnotations: {}
podAnnotations: {}
podLabels:
  app: external-secrets

podSecurityContext:
  enabled: true
  # fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  enabled: true
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  seccompProfile:
    type: RuntimeDefault

resources:
  requests:
    cpu: 10m
    memory: 32Mi
  limits:
    cpu: 100m
    memory: 128Mi

serviceMonitor:
  enabled: true
  namespace: "mon-system"
  additionalLabels: {}

  interval: 30s
  scrapeTimeout: 25s
  honorLabels: false

  metricRelabelings: []
  # - action: replace
  #   regex: (.*)
  #   replacement: $1
  #   sourceLabels:
  #   - exported_namespace
  #   targetLabel: namespace

  # -- Relabel configs to apply to samples before ingestion. [Relabeling](https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config)
  relabelings: []
  # - sourceLabels: [__meta_kubernetes_pod_node_name]
  #   separator: ;
  #   regex: ^(.*)$
  #   targetLabel: nodename
  #   replacement: $1
  #   action: replace

metrics:

  listen:
    port: 8080

  service:
    # -- Enable if you use another monitoring tool than Prometheus to scrape the metrics
    enabled: false

    # -- Metrics service port to scrape
    port: 8080

    # -- Additional service annotations
    annotations: {}

nodeSelector: {}

tolerations: []

topologySpreadConstraints: []

affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: app
          operator: In
          values:
          - external-secrets
      topologyKey: "kubernetes.io/hostname"

# -- Pod priority class name.
priorityClassName: ""

# -- Pod disruption budget - for more details see https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1

# -- Run the controller on the host network
hostNetwork: false

webhook:
  create: true
  certCheckInterval: "5m"
  lookaheadInterval: ""
  replicaCount: 3

  revisionHistoryLimit: 3

  certDir: /tmp/certs
  failurePolicy: Fail
  hostNetwork: false
  image:
    repository: ghcr.io/external-secrets/external-secrets
    pullPolicy: IfNotPresent
    tag: ""
    flavour: ""
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  port: 10250
  rbac:
    create: true
  serviceAccount:
    create: true
    automount: true
    annotations: {}
    extraLabels: {}
    name: "external-secrets-webhook-sa"
  nodeSelector: {}

  certManager:
    enabled: false
    # -- Automatically add the cert-manager.io/inject-ca-from annotation to the
    # webhooks and CRDs. As long as you have the cert-manager CA Injector
    # enabled, this will automatically setup your webhook's CA to the one used
    # by cert-manager. See https://cert-manager.io/docs/concepts/ca-injector
    addInjectorAnnotations: true
    cert:
      # -- Create a certificate resource within this chart. See
      # https://cert-manager.io/docs/usage/certificate/
      create: true
      # -- For the Certificate created by this chart, setup the issuer. See
      # https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.IssuerSpec
      issuerRef:
        group: cert-manager.io
        kind: "Issuer"
        name: "my-issuer"
      # -- Set the requested duration (i.e. lifetime) of the Certificate. See
      # https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.CertificateSpec
      # One year by default.
      duration: "8760h"
      # -- How long before the currently issued certificateâ€™s expiry
      # cert-manager should renew the certificate. See
      # https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.CertificateSpec
      # Note that renewBefore should be greater than .webhook.lookaheadInterval
      # since the webhook will check this far in advance that the certificate is
      # valid.
      renewBefore: ""
      # -- Add extra annotations to the Certificate resource.
      annotations: {}

  tolerations: []

  topologySpreadConstraints: []

  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - external-secrets-webhook
        topologyKey: "kubernetes.io/hostname"

    # -- Pod priority class name.
  priorityClassName: ""

  # -- Pod disruption budget - for more details see https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
  podDisruptionBudget:
    enabled: false
    minAvailable: 1
    # maxUnavailable: 1

  metrics:
    listen:
      port: 8080
    service:
      enabled: true
      port: 8080
      annotations: {}

  readinessProbe:
    address: ""
    port: 8081

  extraEnv: []
  extraArgs: {}
  extraVolumes: []
  extraVolumeMounts: []
  secretAnnotations: {}
  deploymentAnnotations: {}
  podAnnotations: {}
  podLabels:
    app: external-secrets-webhook
  podSecurityContext:
    enabled: true
      # fsGroup: 2000

  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    enabled: true
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
    seccompProfile:
      type: RuntimeDefault

  resources: {}
      # requests:
      #   cpu: 10m
      #   memory: 32Mi

certController:
  create: true
  requeueInterval: "5m"
  replicaCount: 3

  revisionHistoryLimit: 3

  image:
    repository: ghcr.io/external-secrets/external-secrets
    pullPolicy: IfNotPresent
    tag: ""
    flavour: ""
  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""
  rbac:
    create: true
  serviceAccount:
    create: true
    automount: true
    annotations: {}
    extraLabels: {}
    name: "external-secrets-cert-controller-sa"
  nodeSelector: {}

  tolerations: []

  topologySpreadConstraints: []

  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - cert-controller
        topologyKey: "kubernetes.io/hostname"

  hostNetwork: false
  priorityClassName: ""

  podDisruptionBudget:
    enabled: true
    minAvailable: 1

  metrics:
    listen:
      port: 8080

    service:
      enabled: true
      port: 8080
      annotations: {}

  readinessProbe:
    address: ""
    port: 8081
  extraEnv: []
  extraArgs: {}
  extraVolumes: []
  extraVolumeMounts: []
  deploymentAnnotations: {}
  podAnnotations: {}
  podLabels:
    app: cert-controller
  podSecurityContext:
    enabled: true
      # fsGroup: 2000

  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    enabled: true
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000
    seccompProfile:
      type: RuntimeDefault

  resources:
    requests:
      cpu: 10m
      memory: 32Mi
    limits:
      cpu: 100m
      memory: 128Mi

dnsPolicy: ClusterFirst
dnsConfig: {}
podSpecExtra: {}

