containerRuntime: containerd
Kubernetes: true

operator:
  initcontainer:
    repository: "docker"
    tag: "20.10"

    resources:
      limits:
        cpu: 100m
        memory: 64Mi
      requests:
        cpu: 50m
        memory: 64Mi
  container:
    repository: "kubesphere/fluent-operator"
    tag: "v2.9.0"

  nodeSelector:
    node-type: worker

  tolerations: []
  priorityClassName: ""
  podSecurityContext: {}
  securityContext: {}
  resources:
    limits:
      cpu: 100m
      memory: 60Mi
    requests:
      cpu: 100m
      memory: 20Mi
  annotations: {}
  imagePullSecrets: []
  labels: {}
  logPath:
    containerd: /var/log
  disableComponentControllers: "fluentd"
  extraArgs: []

fluentbit:
  crdsEnable: true
  enable: true
  serviceMonitor: true
  image:
    repository: "ghcr.io/fluent/fluent-operator/fluent-bit"
    tag: "v3.0.7"
  resources:
    limits:
      cpu: 500m
      memory: 200Mi
    requests:
      cpu: 10m
      memory: 25Mi
  annotations:
    {}
  labels: {}

  serviceAccountAnnotations: {}

  imagePullSecrets: []
  logLevel: "info"
  secrets: []
  hostNetwork: false
  podSecurityContext: {}
  securityContext: {}
  additionalVolumes: []
  additionalVolumesMounts: []
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: node-role.kubernetes.io/edge
                operator: DoesNotExist
  nodeSelector: {}
  tolerations:
    - operator: Exists
  priorityClassName: ""
  envVars: []
  schedulerName: ""

  namespaceFluentBitCfgSelector: {}

  input:
    tail:
      enable: true
      refreshIntervalSeconds: 10
      memBufLimit: 5MB
      bufferMaxSize: ""
      path: "/var/log/containers/*.log"
      skipLongLines: true
      readFromHead: false
      storageType: memory
      pauseOnChunksOverlimit: "off"
      # multilineParser: "docker, cri"
    systemd:
      enable: true
      systemdFilter:
        enable: true
        filters: []
      path: "/var/log/journal"
      includeKubelet: true
      stripUnderscores: "off"
      storageType: memory
      pauseOnChunksOverlimit: "off"
    nodeExporterMetrics: {}
    fluentBitMetrics: {}

  # Configure the output plugin parameter in FluentBit.
  # You can set enable to true to output logs to the specified location.
  output:
    #  You can find more supported output plugins here: https://github.com/fluent/fluent-operator/tree/master/docs/plugins/fluentbit/output
    opentelemetry:
      host: test-otel-collector-collector-headless.mon-system.svc.cluster.local
      port: 4318
      http_user: 
      http_passwd: 
      metrics_uri:
      logs_uri:
      traces_uri:
      logs_body_key: message
      logs_trace_id_message_key: traceId
      logs_span_id_message_key: spanId
      logs_severity_text_message_key: severityText
      logs_severity_number_message_key: severityNumber
      add_label: from fluentbit
    # You can configure the opentelemetry-related configuration here
    
    stdout:
      enable: false

  service:
    storage: {}

  filter:
    multiline:
      enable: false
      keyContent: log
      # emitterMemBufLimit 120 (MB)
      emitterMemBufLimit: 120
      parsers:
        - go
        - python
        - java
    kubernetes:
      enable: true
      labels: false
      annotations: false
    containerd:
      enable: true
    systemd:
      enable: true

  kubeedge:
    enable: false
    prometheusRemoteWrite:
      host: "<cloud-prometheus-service-host>"
      port: "<cloud-prometheus-service-port>"

  # removes the hostPath mounts for varlibcontainers, varlogs and systemd.
  disableLogVolumes: false

  parsers:
    javaMultiline:
      enable: false

fluentd:
  # Installs a sub chart carrying the CRDs for the fluentd controller. The sub chart is enabled by default.
  crdsEnable: false
  enable: false
  name: fluentd
  # Valid modes include "collector" and "agent".
  # The "collector" mode will deploy Fluentd as a StatefulSet as before.
  # The new "agent" mode will deploy Fluentd as a DaemonSet.
  mode: "collector"
  port: 24224
  image:
    repository: "ghcr.io/fluent/fluent-operator/fluentd"
    tag: "v1.17.0"
  # Numbers of the Fluentd instance
  # Applicable when the mode is "collector", and will be ignored when the mode is "agent"
  replicas: 1
  forward:
    port: 24224
  watchedNamespaces:
    - kube-system
    - default
  resources:
    limits:
      cpu: 500m
      memory: 500Mi
    requests:
      cpu: 100m
      memory: 128Mi
  schedulerName: ""
  # Environment variables that can be passed to fluentd pods
  envVars: []
  #  - name: FOO
  #    value: "bar"
  ## Reference to one or more secrets to be used when pulling images
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: []
  # - name: "image-pull-secret"
  logLevel: ""
  priorityClassName: ""
  extras: {}
  # Configure the output plugin parameter in Fluentd.
  # Fluentd is disabled by default, if you enable it make sure to also set up an output to use.
  output:
    es:
      enable: false
      host: elasticsearch-logging-data.kubesphere-logging-system.svc
      port: 9200
      logstashPrefix: ks-logstash-log
      buffer:
        enable: false
        type: file
        path: /buffers/es
    kafka:
      enable: false
      brokers: "my-cluster-kafka-bootstrap.default.svc:9091,my-cluster-kafka-bootstrap.default.svc:9092,my-cluster-kafka-bootstrap.default.svc:9093"
      topicKey: kubernetes_ns
      buffer:
        enable: false
        type: file
        path: /buffers/kafka
    opensearch: {}

nameOverride: ""
fullnameOverride: ""
namespaceOverride: "mon-system"