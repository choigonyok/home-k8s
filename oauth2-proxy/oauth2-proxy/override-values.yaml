namespaceOverride: "oauth-system"

config:
  annotations: {}
  clientID: "oauth2-proxy-oauth"
  clientSecret: "x9Jb4KNWf3sRvMkUNwSCqykv3SBg9EBz"
  # openssl rand -base64 32 | head -c 32 | base64
  cookieSecret: "TkFlc29DN094K2U2alFkb2hibWJNSE82T2hlMC9JUkg="
  cookieName: ""

extraEnv:
  - name: OAUTH2_PROXY_REDIRECT_URL
    value: https://network.choigonyok.com/oauth2/callback
  - name: OAUTH2_PROXY_OIDC_ISSUER_URL
    value: https://auth.choigonyok.com/realms/home-k8s
  - name: OAUTH2_PROXY_EMAIL_DOMAIN
    value: choigonyok.com
  - name: OAUTH2_PROXY_ALLOWED_ROLE
    value: oauth2-proxy-oauth:network-admin
  # - name: OAUTH2_PROXY_ALLOWED_GROUP
  #   value:
  - name: OAUTH2_PROXY_CODE_CHANLLENGE_METHOD
    value: S256
  - name: OAUTH2_PROXY_PROVIDER
    value: keycloak-oidc

initContainers:
  waitForRedis:
    enabled: true
    image:
      repository: "alpine"
      tag: "latest"
      pullPolicy: "IfNotPresent"
    kubectlVersion: ""
    securityContext:
      enabled: true
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 65534
      runAsGroup: 65534
      seccompProfile:
        type: RuntimeDefault
    timeout: 180
    resources: {}
      # limits:
      #   cpu: 100m
      #   memory: 300Mi
      # requests:
      #   cpu: 100m
      #   memory: 300Mi


metrics:
  enabled: false

sessionStorage:
  # Can be one of the supported session storage cookie|redis
  type: cookie
  redis:
    # Name of the Kubernetes secret containing the redis & redis sentinel password values (see also `sessionStorage.redis.passwordKey`)
    existingSecret: ""
    # Redis password value. Applicable for all Redis configurations. Taken from redis subchart secret if not set. `sessionStorage.redis.existingSecret` takes precedence
    password: ""
    # Key of the Kubernetes secret data containing the redis password value
    passwordKey: "redis-password"
    # Can be one of standalone|cluster|sentinel
    clientType: "standalone"
    standalone:
      # URL of redis standalone server for redis session storage (e.g. `redis://HOST[:PORT]`). Automatically generated if not set
      connectionUrl: ""
    cluster:
      # List of Redis cluster connection URLs (e.g. `["redis://127.0.0.1:8000", "redis://127.0.0.1:8000"]`)
      connectionUrls: []
    sentinel:
      # Name of the Kubernetes secret containing the redis sentinel password value (see also `sessionStorage.redis.sentinel.passwordKey`). Default: `sessionStorage.redis.existingSecret`
      existingSecret: ""
      # Redis sentinel password. Used only for sentinel connection; any redis node passwords need to use `sessionStorage.redis.password`
      password: ""
      # Key of the Kubernetes secret data containing the redis sentinel password value
      passwordKey: "redis-sentinel-password"
      # Redis sentinel master name
      masterName: ""
      # List of Redis sentinel connection URLs (e.g. `["redis://127.0.0.1:8000", "redis://127.0.0.1:8000"]`)
      connectionUrls: []

ingress:
  enabled: true
  className: nginx
  path: /
  pathType: Prefix
  hosts:
    - proxy.auth.choigonyok.com
  labels: {}
  annotations: {}
  # tls:
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local